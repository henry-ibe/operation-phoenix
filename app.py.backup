"""
Phoenix Air - Main Application with Prometheus Metrics
"""
from flask import Flask, render_template, redirect, url_for, flash, Response
from flask_login import LoginManager, current_user
from prometheus_client import Counter, Gauge, Histogram, generate_latest, CONTENT_TYPE_LATEST
from dotenv import load_dotenv
import os

# Load environment variables
load_dotenv()

# Create Flask app
app = Flask(__name__)
app.config['SECRET_KEY'] = os.getenv('SECRET_KEY', 'dev-key')
app.config['SQLALCHEMY_DATABASE_URI'] = os.getenv('DATABASE_URL')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# Initialize database with app
from models import db, Airport, Aircraft, Flight, User, Booking, Baggage
db.init_app(app)

# Prometheus Metrics
# Counters
phoenix_requests_total = Counter('phoenix_requests_total', 'Total HTTP requests', ['method', 'endpoint', 'status'])
phoenix_bookings_total = Counter('phoenix_bookings_total', 'Total number of bookings created')
phoenix_checkins_total = Counter('phoenix_checkins_total', 'Total number of check-ins completed')
phoenix_baggage_total = Counter('phoenix_baggage_total', 'Total baggage items checked')
phoenix_searches_total = Counter('phoenix_searches_total', 'Total flight searches performed')
phoenix_user_registrations_total = Counter('phoenix_user_registrations_total', 'Total user registrations')

# Gauges (current state)
phoenix_active_users = Gauge('phoenix_active_users', 'Number of registered users')
phoenix_available_flights = Gauge('phoenix_available_flights', 'Number of available flights')
phoenix_total_revenue = Gauge('phoenix_total_revenue', 'Total booking revenue in dollars')
phoenix_pending_checkins = Gauge('phoenix_pending_checkins', 'Number of bookings awaiting check-in')
phoenix_completed_checkins = Gauge('phoenix_completed_checkins', 'Number of completed check-ins')
phoenix_total_bookings = Gauge('phoenix_total_bookings', 'Total number of bookings')
phoenix_total_baggage = Gauge('phoenix_total_baggage', 'Total baggage items')

# Service Health (1 = UP, 0 = DOWN)
phoenix_service_database = Gauge('phoenix_service_database', 'Database service health')
phoenix_service_flight_search = Gauge('phoenix_service_flight_search', 'Flight search service health')
phoenix_service_booking = Gauge('phoenix_service_booking', 'Booking service health')
phoenix_service_checkin = Gauge('phoenix_service_checkin', 'Check-in service health')
phoenix_service_baggage = Gauge('phoenix_service_baggage', 'Baggage tracking service health')
phoenix_service_auth = Gauge('phoenix_service_auth', 'Authentication service health')

# Initialize Flask-Login
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'auth.login'
login_manager.login_message = 'Please log in to access this page.'
login_manager.login_message_category = 'info'

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

# Update metrics before each request
@app.before_request
def update_metrics():
    """Update gauge metrics before each request"""
    try:
        from sqlalchemy import func
        
        # Update business metrics
        phoenix_active_users.set(User.query.count())
        phoenix_available_flights.set(Flight.query.count())
        
        total_bookings = Booking.query.count()
        completed = Booking.query.filter_by(checked_in=True).count()
        phoenix_total_bookings.set(total_bookings)
        phoenix_pending_checkins.set(total_bookings - completed)
        phoenix_completed_checkins.set(completed)
        phoenix_total_baggage.set(Baggage.query.count())
        
        revenue = db.session.query(func.sum(Booking.total_price)).scalar() or 0
        phoenix_total_revenue.set(float(revenue))
        
        # Update service health
        phoenix_service_database.set(1)  # If we got here, DB is up
        phoenix_service_flight_search.set(1)
        phoenix_service_booking.set(1)
        phoenix_service_checkin.set(1)
        phoenix_service_baggage.set(1)
        phoenix_service_auth.set(1)
    except Exception as e:
        # If any error, mark services as down
        phoenix_service_database.set(0)

# Prometheus metrics endpoint
@app.route('/metrics')
def metrics():
    """Expose Prometheus metrics"""
    return Response(generate_latest(), mimetype=CONTENT_TYPE_LATEST)

# Homepage route
@app.route('/')
def index():
    airports = Airport.query.all()
    aircraft = Aircraft.query.all()
    
    return render_template('index.html', 
                         app_name='Phoenix Air',
                         airports=airports,
                         aircraft=aircraft)

# System status page
@app.route('/status')
def status():
    return render_template('status.html')

# Health check
@app.route('/health')
def health():
    try:
        result = db.session.execute(db.text('SELECT 1'))
        db_status = 'connected'
    except Exception as e:
        db_status = f'disconnected: {str(e)}'
    
    return {
        'status': 'healthy',
        'app': 'Phoenix Air',
        'database': db_status
    }

# Register blueprints
from routes.booking import booking_bp
from routes.auth import auth_bp
from routes.monitoring import monitoring_bp

app.register_blueprint(booking_bp)
app.register_blueprint(auth_bp)
app.register_blueprint(monitoring_bp)

if __name__ == '__main__':
    port = int(os.getenv('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=True)
